{"version":3,"sources":["App.jsx","index.js"],"names":["button","rest","scale","hover","pressed","App","props","state","currentColour","Colours","length","randomNumber","Math","floor","random","this","setState","r","round","parseInt","red","slice","g","green","b","blue","getRandomColour","prevState","document","body","style","backgroundColor","hex","className","div","layout","name","getRGB","hue","satHSL","valueHSV","lightHSL","onClick","variants","initial","whileHover","whileTap","background","animate","transition","duration","delay","ease","React","Component","ReactDOM","render","getElementById"],"mappings":"ytsJAKMA,EAAS,CACbC,KAAM,CAAEC,MAAO,GACfC,MAAO,CAAED,MAAO,KAChBE,QAAS,CAAEF,MAAO,MA0ELG,E,kDAtEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,cAAeC,EAAQ,IAHR,E,8DAQjB,IAAMC,EAASD,EAAQC,OACjBC,EAAeC,KAAKC,MAAMD,KAAKE,SAAWJ,GAEhDK,KAAKC,SAAS,CAAER,cAAeC,EAAQE,O,+BAIvC,IAAMM,EAAIL,KAAKM,MAA4D,KAAtDC,SAASJ,KAAKR,MAAMC,cAAcY,IAAIC,MAAM,GAAI,KAC/DC,EAAIV,KAAKM,MAA8D,KAAxDC,SAASJ,KAAKR,MAAMC,cAAce,MAAMF,MAAM,GAAI,KACjEG,EAAIZ,KAAKM,MAA6D,KAAvDC,SAASJ,KAAKR,MAAMC,cAAciB,KAAKJ,MAAM,GAAI,KAEtE,MAAM,IAAN,OAAWJ,EAAX,aAAiBK,EAAjB,aAAuBE,EAAvB,O,0CAIAT,KAAKW,oB,yCAGYC,GACbZ,KAAKR,MAAMC,gBAAkBmB,EAAUnB,gBACzCoB,SAASC,KAAKC,MAAMC,gBAAkBhB,KAAKR,MAAMC,cAAcwB,O,+BAIzD,IAAD,OACP,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,YAAYH,MAAO,CAAEC,gBAAiBhB,KAAKR,MAAMC,cAAcwB,MAC5E,kBAAC,IAAOE,IAAR,CAAYD,UAAU,kBAAkBE,OAAO,YAC7C,kBAAC,IAAOD,IAAR,CAAYD,UAAU,2BAA2BlB,KAAKR,MAAMC,cAAc4B,MAC1E,yBAAKH,UAAU,kBACb,yBAAKA,UAAU,mBAAmBlB,KAAKR,MAAMC,cAAcwB,KAC3D,yBAAKC,UAAU,mBAAmBlB,KAAKsB,UACvC,yBAAKJ,UAAU,mBAAf,MAAqClB,KAAKR,MAAMC,cAAc8B,IAA9D,OAAuEvB,KAAKR,MAAMC,cAAc+B,OAAhG,OAA4GxB,KAAKR,MAAMC,cAAcgC,UACrI,yBAAKP,UAAU,mBAAf,MAAqClB,KAAKR,MAAMC,cAAc8B,IAA9D,OAAuEvB,KAAKR,MAAMC,cAAc+B,OAAhG,OAA4GxB,KAAKR,MAAMC,cAAciC,YAGzI,kBAAC,IAAOzC,OAAR,CACEiC,UAAU,gBACVS,QAAS,kBAAM,EAAKhB,mBACpBS,QAAM,EACNQ,SAAU3C,EACV4C,QAAQ,OACRC,WAAW,QACXC,SAAS,WAPX,mBAUA,kBAAC,IAAOZ,IAAR,CACED,UAAU,UACVW,QAAS,CACPG,WAAY,yFAEdC,QAAS,CACPD,WAAY,6FAEdE,WAAY,CAAEC,SAAU,EAAGC,MAAO,EAAGC,KAAM,CAAC,IAAK,IAAK,IAAK,a,GAhErDC,IAAMC,WCNxBC,IAASC,OAAO,kBAAC,EAAD,MAAQ5B,SAAS6B,eAAe,W","file":"static/js/main.6f165441.chunk.js","sourcesContent":["import React from \"react\";\nimport { motion } from \"framer-motion\";\nimport \"./styles/app.css\";\nimport Colours from \"./assets/colours\";\n\nconst button = {\n  rest: { scale: 1 },\n  hover: { scale: 1.1 },\n  pressed: { scale: 0.95 }\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentColour: Colours[1],\n    }\n  }\n  \n  getRandomColour() {\n    const length = Colours.length;\n    const randomNumber = Math.floor(Math.random() * length);\n    \n    this.setState({ currentColour: Colours[randomNumber] });\n  }\n\n  getRGB() {\n    const r = Math.round(parseInt(this.state.currentColour.red.slice(0, -1)) * 2.56);\n    const g = Math.round(parseInt(this.state.currentColour.green.slice(0, -1)) * 2.56);\n    const b = Math.round(parseInt(this.state.currentColour.blue.slice(0, -1)) * 2.56);\n    \n    return `(${r}, ${g}, ${b})`;\n  }\n\n  componentDidMount() {\n    this.getRandomColour();\n  }\n  \n  componentDidUpdate(prevState) {\n    if (this.state.currentColour !== prevState.currentColour) {\n      document.body.style.backgroundColor = this.state.currentColour.hex;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"main-body\" style={{ backgroundColor: this.state.currentColour.hex }}>\n          <motion.div className=\"title-container\" layout=\"position\">\n            <motion.div className=\"colour-name info-border\">{this.state.currentColour.name}</motion.div>\n            <div className=\"info-container\">\n              <div className=\"hex info-border\">{this.state.currentColour.hex}</div>\n              <div className=\"rgb info-border\">{this.getRGB()}</div>\n              <div className=\"hsv info-border\">H: {this.state.currentColour.hue} S: {this.state.currentColour.satHSL} V: {this.state.currentColour.valueHSV}</div>\n              <div className=\"hsl info-border\">H: {this.state.currentColour.hue} S: {this.state.currentColour.satHSL} L: {this.state.currentColour.lightHSL}</div>\n            </div>\n          </motion.div>\n          <motion.button \n            className=\"random-button\"\n            onClick={() => this.getRandomColour()}\n            layout\n            variants={button}\n            initial=\"rest\"\n            whileHover=\"hover\"\n            whileTap=\"pressed\"\n          >Random Colour!</motion.button>\n        </div>\n          <motion.div\n            className=\"overlay\"\n            initial={{\n              background: \"radial-gradient(circle, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 0%, #313D53 0%, #313D53 100%)\"\n            }}\n            animate={{\n              background: \"radial-gradient(circle, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 100%, #313D53 100%, #313D53 100%)\"\n            }}\n            transition={{ duration: 1, delay: 1, ease: [.82, .45, .32, .84] }}\n          ></motion.div>\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'));"],"sourceRoot":""}